{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#why-not-image-carousel","title":"Why Not! Image Carousel!","text":"<p>An easy, super simple and customizable image carousel view for Android.</p> <p> </p>"},{"location":"#preview","title":"Preview","text":""},{"location":"#usage","title":"Usage","text":""},{"location":"#dependency","title":"Dependency","text":""},{"location":"#add-the-followings-to-your-project-level-buildgradle-file","title":"Add the followings to your project level <code>build.gradle</code> file.","text":"<pre><code>dependencies {\n    // Material Components for Android. Replace the version with the latest version of Material Components library.\n    implementation 'com.google.android.material:material:1.5.0'\n\n    // Circle Indicator (To fix the xml preview \"Missing classes\" error)\n    implementation 'me.relex:circleindicator:2.1.6'\n\n    implementation 'org.imaginativeworld.whynotimagecarousel:whynotimagecarousel:2.1.1'\n}\n</code></pre>"},{"location":"#requirements","title":"Requirements","text":"<p>0. Minimum SDK for this library is API 21 (Android 5.0 Lollipop).</p> <p>1. Your application have to use AndroidX to use this library.</p> <p>2. Your have to use *.MaterialComponents.* in you styles.</p>"},{"location":"#finally","title":"Finally","text":"<p>Add the view <code>org.imaginativeworld.whynotimagecarousel.ImageCarousel</code> in your layout:</p> <pre><code>&lt;org.imaginativeworld.whynotimagecarousel.ImageCarousel\n    android:id=\"@+id/carousel\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"256dp\" /&gt;\n</code></pre> <p>Use the <code>CarouselItem</code> class for data item. Initialize the <code>ImageCarousel</code> with data using <code>setData()</code> function:</p> <pre><code>// Kotlin\nval carousel: ImageCarousel = findViewById(R.id.carousel)\n\n// Register lifecycle. For activity this will be lifecycle/getLifecycle() and for fragment it will be viewLifecycleOwner/getViewLifecycleOwner().\ncarousel.registerLifecycle(lifecycle)\n\nval list = mutableListOf&lt;CarouselItem&gt;()\n\n// Image URL with caption\nlist.add(\n    CarouselItem(\n        imageUrl = \"https://images.unsplash.com/photo-1532581291347-9c39cf10a73c?w=1080\",\n        caption = \"Photo by Aaron Wu on Unsplash\"\n    )\n)\n\n// Just image URL\nlist.add(\n    CarouselItem(\n        imageUrl = \"https://images.unsplash.com/photo-1534447677768-be436bb09401?w=1080\"\n    )\n)\n\n// Image URL with header\nval headers = mutableMapOf&lt;String, String&gt;()\nheaders[\"header_key\"] = \"header_value\"\n\nlist.add(\n    CarouselItem(\n        imageUrl = \"https://images.unsplash.com/photo-1534447677768-be436bb09401?w=1080\",\n        headers = headers\n    )\n)\n\n// Image drawable with caption\nlist.add(\n    CarouselItem(\n        imageDrawable = R.drawable.image_1,\n        caption = \"Photo by Kimiya Oveisi on Unsplash\"\n    )\n)\n\n// Just image drawable\nlist.add(\n    CarouselItem(\n        imageDrawable = R.drawable.image_2\n    )\n)\n\n// ...\n\ncarousel.setData(list)\n</code></pre> <pre><code>// Java\nImageCarousel carousel = findViewById(R.id.carousel);\n\n// Register lifecycle. For activity this will be lifecycle/getLifecycle() and for fragments it will be viewLifecycleOwner/getViewLifecycleOwner().\ncarousel.registerLifecycle(getLifecycle());\n\nList&lt;CarouselItem&gt; list = new ArrayList&lt;&gt;();\n\n// Image URL with caption\nlist.add(\n    new CarouselItem(\n        \"https://images.unsplash.com/photo-1532581291347-9c39cf10a73c?w=1080\",\n        \"Photo by Aaron Wu on Unsplash\"\n    )\n);\n\n// Just image URL\nlist.add(\n    new CarouselItem(\n        \"https://images.unsplash.com/photo-1534447677768-be436bb09401?w=1080\"\n    )\n);\n\n// Image URL with header\nMap&lt;String, String&gt; headers = new HashMap&lt;&gt;();\nheaders.put(\"header_key\", \"header_value\");\n\nlist.add(\n    new CarouselItem(\n        \"https://images.unsplash.com/photo-1534447677768-be436bb09401?w=1080\",\n        headers\n    )\n);\n\n// Image drawable with caption\nlist.add(\n    new CarouselItem(\n        R.drawable.image_1,\n        \"Photo by Kimiya Oveisi on Unsplash\"\n    )\n);\n\n// Just image drawable\nlist.add(\n    new CarouselItem(\n        R.drawable.image_2\n    )\n);\n\n// ...\n\ncarousel.setData(list);\n</code></pre> <p>That's all you need to use the library! :)</p> <p>Detail examples can be found here.</p>"},{"location":"#imagecarousel-xml-attributes","title":"<code>ImageCarousel</code> XML attributes","text":"<p>All the custom XML attributes for <code>ImageCarousel</code> view with default values are given below. All attributes are optional.</p> <pre><code>&lt;org.imaginativeworld.whynotimagecarousel.ImageCarousel\n    android:id=\"@+id/carousel\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n\n    app:showTopShadow=\"true\"\n    app:topShadowAlpha=\"0.6\"\n    app:topShadowHeight=\"32dp\"\n\n    app:showBottomShadow=\"true\"\n    app:bottomShadowAlpha=\"0.6\"\n    app:bottomShadowHeight=\"64dp\"\n\n    app:showCaption=\"true\"\n    app:captionMargin=\"0dp\"\n    app:captionTextSize=\"14sp\"\n\n    app:showIndicator=\"true\"\n    app:indicatorMargin=\"0dp\"\n\n    app:imageScaleType=\"centerCrop\"\n\n    app:carouselBackground=\"#00000000\"\n    app:imagePlaceholder=\"@drawable/ic_picture\"\n\n    app:carouselPadding=\"0dp\"\n    app:carouselPaddingBottom=\"0dp\"\n    app:carouselPaddingEnd=\"0dp\"\n    app:carouselPaddingStart=\"0dp\"\n    app:carouselPaddingTop=\"0dp\"\n\n    app:showNavigationButtons=\"true\"\n    app:previousButtonLayout=\"@layout/previous_button_layout\"\n    app:previousButtonId=\"@id/btn_previous\"\n    app:previousButtonMargin=\"4dp\"\n    app:nextButtonLayout=\"@layout/next_button_layout\"\n    app:nextButtonId=\"@id/btn_next\"\n    app:nextButtonMargin=\"4dp\"\n\n    app:carouselType=\"BLOCK\"\n    app:carouselGravity=\"CENTER\"\n\n    app:scaleOnScroll=\"false\"\n    app:scalingFactor=\"0.15\"\n    app:autoWidthFixing=\"true\"\n    app:autoPlay=\"false\"\n    app:autoPlayDelay=\"3000\"\n    app:infiniteCarousel=\"true\"\n    app:touchToPause=\"true\" /&gt;\n</code></pre>"},{"location":"#imagecarousel-methods","title":"<code>ImageCarousel</code> methods","text":"<p>You can also set all the attributes programmatically. All the methods and their usages given below.</p>"},{"location":"#kotlin","title":"Kotlin","text":"<pre><code>val carousel: ImageCarousel = findViewById(R.id.carousel)\n\n// Attributes\ncarousel.carouselPadding = 0.dpToPx(context)\ncarousel.carouselPaddingStart = 0.dpToPx(context)\ncarousel.carouselPaddingTop = 0.dpToPx(context)\ncarousel.carouselPaddingEnd = 0.dpToPx(context)\ncarousel.carouselPaddingBottom = 0.dpToPx(context)\n\ncarousel.showTopShadow = true\ncarousel.topShadowAlpha = 0.6f // 0 to 1, 1 means 100%\ncarousel.topShadowHeight = 32.dpToPx(context) // px value of dp\n\ncarousel.showBottomShadow = true\ncarousel.bottomShadowAlpha = 0.6f // 0 to 1, 1 means 100%\ncarousel.bottomShadowHeight = 64.dpToPx(context) // px value of dp\n\ncarousel.showCaption = true\ncarousel.captionMargin = 0.dpToPx(context) // px value of dp\ncarousel.captionTextSize = 14.spToPx(context) // px value of sp\n\ncarousel.showIndicator = true\ncarousel.indicatorMargin = 0.dpToPx(context) // px value of dp\n\ncarousel.showNavigationButtons = true\ncarousel.imageScaleType = ImageView.ScaleType.CENTER_CROP\ncarousel.carouselBackground = ColorDrawable(Color.parseColor(\"#333333\"))\ncarousel.imagePlaceholder = ContextCompat.getDrawable(\n    context,\n    R.drawable.ic_picture\n)\n\n// For custom previous or next button layout,\n// set the layout using \"previousButtonLayout\" attribute and\n// give the View/Button id in \"previousButtonId\" attribute.\ncarousel.previousButtonLayout = R.layout.previous_button_layout\ncarousel.previousButtonId = R.id.btn_previous\ncarousel.previousButtonMargin = 4.dpToPx(context) // px value of dp\n\ncarousel.nextButtonLayout = R.layout.next_button_layout\ncarousel.nextButtonId = R.id.btn_next\ncarousel.nextButtonMargin = 4.dpToPx(context) // px value of dp\n\ncarousel.carouselType = CarouselType.BLOCK\ncarousel.scaleOnScroll = false\ncarousel.scalingFactor = .15f // 0 to 1; 1 means 100\n\n// If the width of a single item in ImageCarousel is not greater then\n// half of the whole ImageCarousel view width, then the ImageCarousel\n// will not work as expected, So it is recommended to set this value\n// true all the time. So, the carousel will automatically increase the\n// width of the items if necessary.\ncarousel.autoWidthFixing = true\n\n// If you want auto slide, turn this feature on.\ncarousel.autoPlay = false\ncarousel.autoPlayDelay = 3000 // Milliseconds\n\n// Touch to pause autoPlay.\ncarousel.touchToPause = true\n\n// Infinite scroll for the carousel.\ncarousel.infiniteCarousel = true\n\n// Scroll listener\ncarousel.onScrollListener = object : CarouselOnScrollListener {\n    override fun onScrollStateChanged(\n        recyclerView: RecyclerView,\n        newState: Int,\n        position: Int,\n        carouselItem: CarouselItem?\n    ) {\n        // ...\n    }\n\n    override fun onScrolled(\n        recyclerView: RecyclerView, \n        dx: Int, \n        dy: Int,\n        position: Int,\n        carouselItem: CarouselItem?\n    ) {\n        // ...\n    }\n}\n\n// Carousel listener\ncarousel.carouselListener = object : CarouselListener {\n    override fun onCreateViewHolder(\n        layoutInflater: LayoutInflater,\n        parent: ViewGroup\n    ): ViewBinding? {\n        // ...\n    }\n\n    override fun onBindViewHolder(\n        binding: ViewBinding,\n        imageScaleType: ImageView.ScaleType,\n        item: CarouselItem,\n        position: Int\n    ) {\n        // ...\n    }\n\n    override fun onClick(position: Int, carouselItem: CarouselItem) {\n        // ...\n    }\n\n    override fun onLongClick(position: Int, dataObject: CarouselItem) {\n        // ...\n    }\n\n}\n\n// Goto next slide/item\ncarousel.next()\n\n// Goto previous slide/item\ncarousel.previous()\n\n// Start auto play\ncarousel.start()\n\n// Stop auto play\ncarousel.stop()\n\n// If you need custom indicator, use the CircleIndicator2 from CircleIndicator (https://github.com/ongakuer/CircleIndicator).\n// Then pass the view to the ImageCarousel.\nval customIndicator: CircleIndicator2 = findViewById(R.id.custom_indicator)\ncarousel.setIndicator(customIndicator)\n\n// For activity this will be lifecycle/getLifecycle() and for fragment it will be viewLifecycleOwner/getViewLifecycleOwner().\ncarousel.registerLifecycle(lifecycle)\n\n// ...\n\n// You can use the following methods to add CarouselItem data to the carousel:\n// 1. setData(data: List&lt;CarouselItem&gt;): Set a list of CarouselItem. This will remove previous data from the carousel.\n// 2. addData(data: List&lt;CarouselItem&gt;): Append list of CarouselItem with existing data.\n// 3. addData(item: CarouselItem): Append a CarouselItem with existing data.\ncarousel.setData(list)\n</code></pre>"},{"location":"#java","title":"Java","text":"<pre><code>ImageCarousel carousel = findViewById(R.id.carousel);\n\n// Attributes\ncarousel.setCarouselPadding(Utils.dpToPx(0, context));\ncarousel.setCarouselPaddingStart(Utils.dpToPx(0, context));\ncarousel.setCarouselPaddingTop(Utils.dpToPx(0, context));\ncarousel.setCarouselPaddingEnd(Utils.dpToPx(0, context));\ncarousel.setCarouselPaddingBottom(Utils.dpToPx(0, context));\n\ncarousel.setShowTopShadow(true);\ncarousel.setTopShadowAlpha(0.6f); // 0 to 1, 1 means 100%\ncarousel.setTopShadowHeight(Utils.dpToPx(32, context)); // px value of dp\n\ncarousel.setShowBottomShadow(true);\ncarousel.setBottomShadowAlpha(0.6f); // 0 to 1, 1 means 100%\ncarousel.setBottomShadowHeight(Utils.dpToPx(64, context)); // px value of dp\n\ncarousel.setShowCaption(true);\ncarousel.setCaptionMargin(Utils.dpToPx(0, context)); // px value of dp\ncarousel.setCaptionTextSize(Utils.spToPx(14, context)); // px value of sp\n\ncarousel.setShowIndicator(true);\ncarousel.setIndicatorMargin(Utils.dpToPx(0, context)); // px value of dp\n\ncarousel.setShowNavigationButtons(true);\ncarousel.setImageScaleType(ImageView.ScaleType.CENTER);\ncarousel.setCarouselBackground(new ColorDrawable(Color.parseColor(\"#333333\")));\ncarousel.setImagePlaceholder(ContextCompat.getDrawable(\n        context,\n        R.drawable.ic_picture\n));\n\n// See kotlin code for details.\ncarousel.setPreviousButtonLayout(R.layout.previous_button_layout);\ncarousel.setPreviousButtonId(R.id.btn_previous);\ncarousel.setPreviousButtonMargin(Utils.dpToPx(4, context)); // px value of dp\n\ncarousel.setNextButtonLayout(R.layout.next_button_layout);\ncarousel.setNextButtonId(R.id.btn_next);\ncarousel.setNextButtonMargin(Utils.dpToPx(4, context)); // px value of dp\n\ncarousel.setCarouselType(CarouselType.BLOCK);\ncarousel.setScaleOnScroll(false);\ncarousel.setScalingFactor(.15f);\n\n// See kotlin code for details.\ncarousel.setAutoWidthFixing(true);\n\n// See kotlin code for details.\ncarousel.setAutoPlay(false);\ncarousel.setAutoPlayDelay(3000); // Milliseconds\n\n// Touch to pause autoPlay.\ncarousel.setTouchToPause(true);\n\n// Infinite scroll for the carousel.\ncarousel.setInfiniteCarousel(true);\n\n// Scroll listener\ncarousel.setOnScrollListener(new CarouselOnScrollListener() {\n    @Override\n    public void onScrolled(@NotNull RecyclerView recyclerView, int dx, int dy, int position, @Nullable CarouselItem carouselItem) {\n        // ...\n    }\n\n    @Override\n    public void onScrollStateChanged(@NotNull RecyclerView recyclerView, int newState, int position, @Nullable CarouselItem carouselItem) {\n        // ...\n    }\n});\n\n// Carousel listener\ncarousel.setCarouselListener(new CarouselListener() {\n    @Nullable\n    @Override\n    public ViewBinding onCreateViewHolder(@NotNull LayoutInflater layoutInflater, @NotNull ViewGroup parent) {\n        // ...\n    }\n\n    @Override\n    public void onBindViewHolder(@NotNull ViewBinding binding, @NotNull ImageView.ScaleType imageScaleType, @NotNull CarouselItem item, int position) {\n        // ...\n    }\n\n    @Override\n    public void onLongClick(int position, @NotNull CarouselItem dataObject) {\n        // ...\n    }\n\n    @Override\n    public void onClick(int position, @NotNull CarouselItem carouselItem) {\n        // ...\n    }\n});\n\n// Goto next slide/item\ncarousel.next()\n\n// Goto previous slide/item\ncarousel.previous()\n\n// Start auto play\ncarousel.start()\n\n// Stop auto play\ncarousel.stop()\n\n// See kotlin code for details.\nCircleIndicator2 indicator = findViewById(R.id.custom_indicator);\ncarousel.setIndicator(indicator);\n\n// See kotlin code for details.\ncarousel.registerLifecycle(lifecycle)\n\n// ...\n\n// See kotlin code for details.\ncarousel.setData(list)\n</code></pre>"},{"location":"#register-lifecycle","title":"Register Lifecycle","text":"<p><code>ImageCarousel</code> is a lifecycle-aware component. You can use the <code>registerLifecycle()</code> method to register a lifecycle. For activity the parameter will be <code>lifecycle</code>/<code>getLifecycle()</code> and for fragment it will be <code>viewLifecycleOwner</code>/<code>getViewLifecycleOwner()</code>.</p> <p>It is recommended to register <code>ImageCarousel</code> to a lifecycle, so that the auto-play/scroll will pause when the app is in the background and resume when the app is resumed.</p> <p>It is also used to correctly initialize the infinite carousel when the app is in the background.</p> <p>So it is recommended if you enabled <code>autoPlay</code> &amp; <code>infiniteCarousel</code>.</p>"},{"location":"#infinite-carousel","title":"Infinite Carousel","text":"<p>The library now supports an infinite carousel, which means that the item view is looped infinitely. This feature is enabled by default, but you can disable it by setting the <code>infiniteCarousel</code> property to <code>false</code>.</p>"},{"location":"#indicator","title":"Indicator","text":"<p>The carousel is bundled with a default indicator. We used the CircleIndicator library for the indicator. You can use all the customization supported by the library in our carousel. You can get the default indicator by the <code>getIndicator()</code> method. If you wish to add your custom indicator, then just use the <code>CircleIndicator2</code> from the CircleIndicator library and set the view using the <code>setIndicator(indicator)</code> method. For details usage see the sample.</p>"},{"location":"#custom-view","title":"Custom View","text":"<p>The carousel supports the view-binding for the custom view. <code>CarouselListener</code> has two methods <code>onCreateViewHolder()</code> and <code>onBindViewHolder()</code> for adding a custom view to the carousel. If you use the <code>RecyclerView.Adapter</code> then you should remember the names of the methods. Both are mapped with the same methods in the <code>RecyclerView.Adapter</code>.</p> <p>Adding a custom view is straightforward. An example is given below:</p> <pre><code>// Kotlin\ncarousel.carouselListener = object : CarouselListener {\n    override fun onCreateViewHolder(\n        layoutInflater: LayoutInflater,\n        parent: ViewGroup\n    ): ViewBinding {\n        // Here, our XML layout file name is custom_item_layout.xml. So our view binding generated class name is CustomItemLayoutBinding.\n        return CustomItemLayoutBinding.inflate(layoutInflater, parent, false)\n    }\n\n    override fun onBindViewHolder(\n        binding: ViewBinding,\n        imageScaleType: ImageView.ScaleType,\n        item: CarouselItem,\n        position: Int\n    ) {\n        // Cast the binding to the returned view binding class of the onCreateViewHolder() method.\n        val currentBinding = binding as CustomItemLayoutBinding\n\n        // Do the bindings...\n        currentBinding.imageView.apply {\n            scaleType = imageScaleType\n\n            // setImage() is an extension function to load image to an ImageView using CarouselItem object. We need to provide current CarouselItem data and the place holder Drawable or drawable resource id to the function. placeholder parameter is optional.\n            setImage(item, R.drawable.ic_wb_cloudy_with_padding)\n        }\n    }\n}\n</code></pre> <pre><code>// Java\nbinding.carousel.setCarouselListener(new CarouselListener() {\n    @Nullable\n    @Override\n    public ViewBinding onCreateViewHolder(@NotNull LayoutInflater layoutInflater, @NotNull ViewGroup parent) {\n        // Here, our XML layout file name is custom_item_layout.xml. So our view binding generated class name is CustomItemLayoutBinding.\n        return ItemCustomFixedSizeLayout1Binding.inflate(layoutInflater, parent, false);\n    }\n\n    @Override\n    public void onBindViewHolder(@NotNull ViewBinding binding, @NotNull ImageView.ScaleType imageScaleType, @NotNull CarouselItem item, int position) {\n         // Cast the binding to the returned view binding class of the onCreateViewHolder() method.\n        ItemCustomFixedSizeLayout1Binding currentBinding = (ItemCustomFixedSizeLayout1Binding) binding;\n\n        // Do the bindings...\n        currentBinding.imageView.setScaleType(imageScaleType);\n\n        // setImage() is an extension function to load image to an ImageView using CarouselItem object. We need to provide current CarouselItem data and the place holder Drawable or drawable resource id to the function. placeholder parameter is optional.\n        Utils.setImage(currentBinding.imageView, item, R.drawable.ic_wb_cloudy_with_padding);\n    }\n});\n</code></pre> <p>Using custom view, you can create any type of carousel, even a carousel without any image! See the sample app for some example.</p>"},{"location":"#carousel-type-carouseltype","title":"Carousel Type (<code>carouselType</code>)","text":"<p><code>ImageCarousel</code> has following types:</p>"},{"location":"#1-carouseltypeblock","title":"1. <code>CarouselType.BLOCK</code>","text":"<p>If you need one item view at a time, then use this carousel type.</p>"},{"location":"#2-carouseltypeshowcase","title":"2. <code>CarouselType.SHOWCASE</code>","text":"<p>If you need multiple item view at a time, use this carousel type.</p> <p>You can also use the <code>scaleOnScroll</code> and <code>scalingFactor</code> attributes with this carousel type.</p>"},{"location":"#scale-item-view-on-scroll-scaleonscroll","title":"Scale Item View On Scroll (<code>scaleOnScroll</code>)","text":"<p>You can use <code>scaleOnScroll</code> attribute to scaling down the adjacent views like above. Use <code>scalingFactor</code> to define scale down percentage. Value should be 0.0 to 1.0.</p>"},{"location":"#carousel-gravity-carouselgravity","title":"Carousel Gravity (<code>carouselGravity</code>)","text":"<p>For <code>CarouselType.SHOWCASE</code>, you can set carousel gravity. Supported gravities ase:</p>"},{"location":"#1-carouselgravitycenter","title":"1. <code>CarouselGravity.CENTER</code>","text":"<p>Current selected item will be at the center of the view.</p>"},{"location":"#2-carouselgravitystart","title":"2. <code>CarouselGravity.START</code>","text":"<p>Current selected item will be at the start of the view.</p>"},{"location":"#credits","title":"Credits","text":"<p>This library is using the CircleIndicator library for the indicator. Inspired by CarouselView library. All the images from Unsplash.</p>"},{"location":"#change-log","title":"Change Log","text":"<p>See the change log here.</p>"},{"location":"#license","title":"License","text":"<pre><code>Copyright 2020 Md. Mahmudul Hasan Shohag\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"changelog/","title":"Change Log","text":""},{"location":"changelog/#version-211-2025-06-22","title":"Version 2.1.1 (2025-06-22) \ud83d\ude80","text":"<ul> <li>Upgrade dependencies to the latest version.</li> </ul>"},{"location":"changelog/#version-210-2022-03-01","title":"Version 2.1.0 (2022-03-01)","text":"<ul> <li>\ud83d\udc1e Fixed #74:   Changing <code>infiniteCarousel</code> attribute now will call <code>initAdapter()</code>.</li> </ul> <p>Note: Before changing the <code>infiniteCarousel</code>, it is better to clear the data-set, then change the <code>infiniteCarousel</code> attribute and finally set the data. Changing the <code>infiniteCarousel</code> with existing data can create undesirable issues.</p> <p>Example code:</p> <pre><code>// Step 1: Clear existing data\ncarousel.setData(emptyList())\n\n// Step 2: Change infiniteCarousel\ncarousel.infiniteCarousel = true // or false\n\n// Step 3: Finally, set data\ncarousel.setData(itemList) // itemList is List&lt;CarouselItem&gt;\n</code></pre> <ul> <li>\u2b06 Dependencies upgraded to the latest version.</li> <li>\ud83c\udd95 Some instrumented tests were added.</li> </ul>"},{"location":"changelog/#version-206-2022-01-11","title":"Version 2.0.6 (2022-01-11)","text":"<ul> <li>\ud83d\udc1e Fixed #72: Indicator   will now indicate first item after data replace.</li> <li>\u2b06 Updated deprecated lifecycle code.</li> <li>\u2b06 Kotlin and other libs upgraded to the latest version.</li> </ul>"},{"location":"changelog/#version-205-2021-09-30","title":"Version 2.0.5 (2021-09-30)","text":"<ul> <li>\ud83d\udc1e Fixed #50: Fixed a   crash when dataset changed.</li> <li>\ud83d\udc1e Fixed some bugs related to data insert.</li> <li>\u2b06 Kotlin and other libs upgraded to the latest version.</li> </ul>"},{"location":"changelog/#version-204-2021-08-08","title":"Version 2.0.4 (2021-08-08)","text":"<ul> <li>\ud83d\udc1e   Fixed #43: <code>currentPosition</code>   will now give real data position. For virtual data position in <code>infiniteCarousel</code>   use <code>currentVirtualPosition</code>.</li> <li>\ud83d\udc1e Fixed #45: <code>autoPlay</code>   will now work after slide.</li> </ul>"},{"location":"changelog/#version-203-2021-07-25","title":"Version 2.0.3 (2021-07-25)","text":"<ul> <li>\ud83d\udc1e Fixed: wrong <code>position</code> value in <code>onScrollStateChanged</code> listener.</li> </ul>"},{"location":"changelog/#version-202-2021-05-31","title":"Version 2.0.2 (2021-05-31)","text":"<ul> <li>\ud83c\udd95 <code>registerLifecycle(lifecycleOwner: LifecycleOwner)</code> method added.</li> <li>\ud83d\udee0\ufe0f Java sample converted into a <code>Fragment</code> example.</li> </ul>"},{"location":"changelog/#version-200-201-2021-05-22","title":"Version 2.0.0, 2.0.1 (2021-05-22)","text":"<ul> <li>\ud83c\udd95 Previous boring custom layout system removed. And view-binding supported custom layout system   added. See <code>CarouselListener</code> in the sample app for details. \ud83c\udf89</li> <li>\ud83c\udd95 The carousel is now supported Infinite \u221e looping (Infinite Carousel) \ud83e\udd73! It's default now. You   can disable it by setting <code>infiniteCarousel</code> to <code>false</code>.</li> <li>\ud83c\udd95 Carousel now supports touch-to-pause auto-play. It is default now. You can disable it by   setting <code>touchToPause</code> to <code>false</code>. \ud83c\udf8a</li> <li>\ud83c\udd95 <code>carouselGravity</code> attribute added. So you can set carousel item view gravity <code>START</code> if you   want.</li> <li>\ud83c\udd95 Carousel padding attributes added. You can use <code>carouselPadding</code>, <code>carouselPaddingStart</code>   , <code>carouselPaddingTop</code>, <code>carouselPaddingEnd</code>, and <code>carouselPaddingBottom</code> to set carousel padding.</li> <li>\ud83c\udd95 The <code>ImageCarousel</code> is now a lifecycle component. You can register any lifecycle   with <code>registerLifecycle()</code> method. It is recommended if you enable <code>autoPlay</code>   and <code>infiniteCarousel</code>. So that when the application is in the pause state, the carousel will be   paused and resumed on the app resume. It is also used to correctly initialize the infinite   carousel when the app is in the background.</li> <li>\ud83c\udd95 You can now use <code>setData()</code> to set <code>CarouselItem</code> list. And <code>addData()</code> to add single or   multiple items to the carousel. If you set/add data only once, then you can continue   using <code>addData()</code> method.</li> <li>\ud83c\udd95 You can now get the carousel items using <code>getData()</code> method.</li> <li>\ud83c\udd95 Sample app re-designed. Various use cases and inspiring \ud83d\udca1 examples are added. \ud83d\ude0e</li> <li>\u26a0\ufe0f <code>OnItemClickListener</code> renamed to <code>CarouselListener</code> and two new method (<code>onCreateViewHolder()</code>   and <code>onBindViewHolder()</code>) added for the latest custom view feature. <code>setOnItemClickListener()</code>   also renamed to <code>setCarouselListener()</code>.</li> <li>\u26a0\ufe0f <code>CarouselListener</code> (previously <code>OnItemClickListener</code>) package changed   from <code>org.imaginativeworld.whynotimagecarousel</code>   to <code>org.imaginativeworld.whynotimagecarousel.listener</code>.</li> <li>\u26a0\ufe0f <code>CarouselItem</code> package changed from <code>org.imaginativeworld.whynotimagecarousel</code>   to <code>org.imaginativeworld.whynotimagecarousel.model</code>.</li> <li>\ufe0f\ud83d\udee0 New parameters <code>position</code> and <code>carouselItem</code> add to <code>onScrolled</code> method   in  <code>CarouselOnScrollListener</code>.</li> <li>\ud83d\udee0\ufe0f The default carousel background changed to transparent. You can always change the background   of the carousel using <code>carouselBackground</code>. The previous value was <code>#333333</code>.</li> <li>\ud83d\udee0\ufe0f Left and right navigation default button icon replaced with a rounded chevron icon.</li> </ul>"},{"location":"changelog/#version-130-2021-03-25","title":"Version 1.3.0 (2021-03-25)","text":"<p>Header field is added to the <code>CarouselItem</code>.</p> <p>Examples:</p> <pre><code>// Kotlin\nval headers = mutableMapOf&lt;String, String&gt;()\nheaders[\"header_key\"] = \"header_value\"\n\nval carouselItem1 = CarouselItem(\n    imageUrl = \"https://images.unsplash.com/photo-1549577434-d7615fd4ceac?w=1080\",\n    caption = \"Photo by Jeremy Bishop on Unsplash\",\n  headers = headers\n)\nval carouselItem2 = CarouselItem(\n  imageUrl = \"https://images.unsplash.com/photo-1549577434-d7615fd4ceac?w=1080\",\n  headers = headers\n)\n</code></pre> <pre><code>// Java\nMap&lt;String, String&gt; headers=new HashMap&lt;&gt;();\n        headers.put(\"header_key\",\"header_value\");\n\n        CarouselItem carouselItem1=new CarouselItem(\n        \"https://images.unsplash.com/photo-1549577434-d7615fd4ceac?w=1080\",\n        \"Photo by Jeremy Bishop on Unsplash\",\n        headers\n        );\n\n        CarouselItem carouselItem2=new CarouselItem(\n        \"https://images.unsplash.com/photo-1549577434-d7615fd4ceac?w=1080\",\n        headers\n        );\n</code></pre>"},{"location":"changelog/#version-121-2021-02-04","title":"Version 1.2.1 (2021-02-04)","text":"<p>We move our library from jitpack.io to maven repository. So no need to add any repositories for using the library.</p> <p>View binding added to the sample. Dependent libraries updated.</p>"},{"location":"changelog/#version-110-2020-06-03","title":"Version 1.1.0 (2020-06-03)","text":"<p>Image drawable support added.</p>"},{"location":"changelog/#version-100-101-102-2020-03-12","title":"Version 1.0.0, 1.0.1, 1.0.2 (2020-03-12)","text":"<p>The initial release of the library.</p>"}]}